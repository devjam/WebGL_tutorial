// Generated by CoffeeScript 1.3.3
(function() {
  var DepthRenderPass;

  DepthRenderPass = (function() {

    DepthRenderPass.shader = {
      uniforms: {
        tDiffuse: {
          type: "t",
          value: 0,
          texture: null
        },
        steps: {
          type: "f",
          value: 1.0
        }
      },
      vertexShader: 'varying vec2 vUv;\nvoid main() {\n	vUv = vec2( uv.x, 1.0 - uv.y );\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}',
      fragmentShader: 'uniform sampler2D tDiffuse;\nuniform float steps;\n\nvarying vec2 vUv;\nvoid main() {\n	float c = texture2D(tDiffuse, vUv).r * steps;\n	float v = mod(c, 2.0);\n	if (v < 1.0) { v = 0.0; } else { v = 1.0; }\n	gl_FragColor = vec4(v, v, v, 1.0);\n}'
    };

    function DepthRenderPass(scene, camera, steps, far, width, height, clearColor, clearAlpha) {
      var pars, shader;
      if (clearAlpha == null) {
        clearAlpha = 1;
      }
      this.scene = scene;
      this.camera = camera;
      this.steps = steps;
      this.far = far;
      this.original_far = camera.far;
      this.clearColor = clearColor;
      this.clearAlpha = clearAlpha;
      this.enabled = true;
      this.clear = true;
      this.needsSwap = false;
      this.material_depth = new THREE.MeshDepthMaterial({
        near: 1,
        far: this.original_far
      });
      pars = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      };
      this.TextureDepth = new THREE.WebGLRenderTarget(width, height, pars);
      shader = DepthRenderPass.shader;
      this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      this.uniforms["tDiffuse"].texture = this.TextureDepth;
      this.material = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
    }

    DepthRenderPass.prototype.render = function(renderer, writeBuffer, readBuffer, delta) {
      this.scene.overrideMaterial = this.material_depth;
      this.camera.far = this.far;
      if (this.clearColor) {
        this.oldClearColor.copy(renderer.getClearColor());
        this.oldClearAlpha = renderer.getClearAlpha();
        renderer.setClearColor(this.clearColor, this.clearAlpha);
      }
      renderer.render(this.scene, this.camera, this.TextureDepth, true);
      this.uniforms["steps"].value = this.steps;
      THREE.EffectComposer.quad.material = this.material;
      renderer.render(THREE.EffectComposer.scene, THREE.EffectComposer.camera, readBuffer, false);
      if (this.clearColor) {
        renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);
      }
      this.scene.overrideMaterial = null;
      return this.camera.far = this.original_far;
    };

    return DepthRenderPass;

  })();

  this.DepthRenderPass = DepthRenderPass;

}).call(this);
