// Generated by CoffeeScript 1.3.3
(function() {
  var FocusBlurPass;

  FocusBlurPass = (function() {

    function FocusBlurPass(scene, camera, overrideMaterial, clearColor, clearAlpha) {
      if (clearAlpha == null) {
        clearAlpha = 1;
      }
      this.scene = scene;
      this.camera = camera;
      this.overrideMaterial = overrideMaterial;
      this.clearColor = clearColor;
      this.clearAlpha = clearAlpha;
      this.enabled = true;
      this.clear = true;
      this.needsSwap = false;
      this.material_depth = new THREE.MeshDepthMaterial();
      this.focus = null;
      this.aperture = 0.05;
      this.maxblur = 2;
    }

    FocusBlurPass.prototype.setup = function(width, height, focus, aperture, maxblur) {
      var pars, shader;
      if (focus == null) {
        focus = null;
      }
      if (aperture == null) {
        aperture = null;
      }
      if (maxblur == null) {
        maxblur = null;
      }
      if (focus != null) {
        this.focus = focus;
      }
      if (aperture != null) {
        this.aperture = aperture;
      }
      if (maxblur != null) {
        this.maxblur = maxblur;
      }
      if ((width != null) && (height != null)) {
        pars = {
          minFilter: THREE.LinearFilter,
          magFilter: THREE.LinearFilter,
          format: THREE.RGBFormat
        };
        this.TextureDepth = new THREE.WebGLRenderTarget(width, height, pars);
        this.TextureColor = new THREE.WebGLRenderTarget(width, height, pars);
        shader = THREE.ShaderExtras["bokeh"];
        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
        this.uniforms["tColor"].texture = this.TextureColor;
        this.uniforms["tDepth"].texture = this.TextureDepth;
        this.uniforms["focus"].value = this.focus;
        this.uniforms["aperture"].value = this.aperture;
        this.uniforms["maxblur"].value = this.maxblur;
        this.uniforms["aspect"].value = width / height;
        return this.material = new THREE.ShaderMaterial({
          uniforms: this.uniforms,
          vertexShader: shader.vertexShader,
          fragmentShader: shader.fragmentShader
        });
      }
    };

    FocusBlurPass.prototype.render = function(renderer, writeBuffer, readBuffer, delta) {
      this.scene.overrideMaterial = this.overrideMaterial;
      if (this.clearColor) {
        this.oldClearColor.copy(renderer.getClearColor());
        this.oldClearAlpha = renderer.getClearAlpha();
        renderer.setClearColor(this.clearColor, this.clearAlpha);
      }
      if (this.focus != null) {
        this.scene.overrideMaterial = null;
        renderer.render(this.scene, this.camera, this.TextureColor, true);
        this.scene.overrideMaterial = this.material_depth;
        renderer.render(this.scene, this.camera, this.TextureDepth, true);
        this.uniforms["focus"].value = this.focus;
        this.uniforms["aperture"].value = this.aperture;
        this.uniforms["maxblur"].value = this.maxblur;
        THREE.EffectComposer.quad.material = this.material;
        renderer.render(THREE.EffectComposer.scene, THREE.EffectComposer.camera, readBuffer, false);
      } else {
        renderer.render(this.scene, this.camera, readBuffer, this.clear);
      }
      if (this.clearColor) {
        renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);
      }
      return this.scene.overrideMaterial = null;
    };

    return FocusBlurPass;

  })();

  this.FocusBlurPass = FocusBlurPass;

}).call(this);
