// Generated by CoffeeScript 1.3.3
(function() {
  var HSVGradationPass;

  HSVGradationPass = (function() {

    HSVGradationPass.shader = {
      uniforms: {
        tDiffuse: {
          type: "t",
          value: 0,
          texture: null
        },
        time: {
          type: "f",
          value: 0.0
        },
        opacity: {
          type: "f",
          value: 0.0
        }
      },
      vertexShader: 'varying vec2 vUv;\nvoid main() {\n	vUv = vec2( uv.x, 1.0 - uv.y );\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}',
      fragmentShader: 'uniform sampler2D tDiffuse;\nuniform float time;\nuniform float opacity;\n\nvarying vec2 vUv;\n\nvoid main() {\n	vec3 hsv = vec3((vUv.x + time * 0.1 + vUv.y * 0.25) * 120.0, 1.0, 1.0);\n	vec3 rgb = texture2D(tDiffuse, vUv).rgb;\n\n	vec3 col;\n	float hue = mod(hsv.r, 360.0);\n	float s = hsv.g * 1.0;\n	float v = hsv.b * 1.0;\n	if(s < 0.0) { s = 0.0; }\n	if(s > 1.0) { s = 1.0; }\n	if(v < 0.0) { v = 0.0; }\n	if(v > 1.0) { v = 1.0; }\n	if(s > 0.0) {\n		int h = int(floor(hue / 60.0));\n		float f = hue / 60.0 - float(h);\n		float p = v * (1.0 - s);\n		float q = v * (1.0 - f * s);\n		float r = v * (1.0 - (1.0 - f) * s);\n\n		if(h == 0) col = vec3(v, r, p);\n		else if(h == 1) col = vec3(q, v, p);\n		else if(h == 2) col = vec3(p, v, r);\n		else if(h == 3) col = vec3(p, q, v);\n		else if(h == 4) col = vec3(r, p, v);\n		else col = vec3(v, p, q);\n	}else{\n		col = vec3(v);\n	}\n\n	rgb += col * opacity;\n	gl_FragColor.rgb = rgb;\n	gl_FragColor.a = 1.0;\n}'
    };

    function HSVGradationPass(opacity) {
      var shader;
      if (opacity == null) {
        opacity = 0.5;
      }
      this.opacity = opacity;
      shader = HSVGradationPass.shader;
      this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      this.uniforms["opacity"].value = this.opacity;
      this.material = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
      this.enabled = true;
      this.renderToScreen = false;
      this.needsSwap = true;
    }

    HSVGradationPass.prototype.render = function(renderer, writeBuffer, readBuffer, delta) {
      this.uniforms["tDiffuse"].texture = readBuffer;
      this.uniforms["opacity"].value = this.opacity;
      this.uniforms["time"].value += delta;
      THREE.EffectComposer.quad.material = this.material;
      if (this.renderToScreen) {
        return renderer.render(THREE.EffectComposer.scene, THREE.EffectComposer.camera);
      } else {
        return renderer.render(THREE.EffectComposer.scene, THREE.EffectComposer.camera, writeBuffer, false);
      }
    };

    return HSVGradationPass;

  })();

  this.HSVGradationPass = HSVGradationPass;

}).call(this);
