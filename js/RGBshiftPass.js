// Generated by CoffeeScript 1.3.3
(function() {
  var RGBshiftPass;

  RGBshiftPass = (function() {

    RGBshiftPass.shader = {
      uniforms: {
        tDiffuse: {
          type: "t",
          value: 0,
          texture: null
        },
        time: {
          type: "f",
          value: 0.0
        },
        width: {
          type: "f",
          value: 0.0
        },
        height: {
          type: "f",
          value: 0.0
        },
        offsetR: {
          type: "v2",
          value: new THREE.Vector2(0.0, 0.0)
        },
        offsetG: {
          type: "v2",
          value: new THREE.Vector2(0.0, 0.0)
        },
        offsetB: {
          type: "v2",
          value: new THREE.Vector2(0.0, 0.0)
        }
      },
      vertexShader: 'varying vec2 vUv;\nvoid main() {\n	vUv = vec2( uv.x, 1.0 - uv.y );\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}',
      fragmentShader: 'uniform sampler2D tDiffuse;\nuniform float width;\nuniform float height;\nuniform vec2 offsetR;\nuniform vec2 offsetG;\nuniform vec2 offsetB;\n\nvarying vec2 vUv;\nvoid main() {\n	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n	vec2 offset_r = vec2(offsetR.x / width, offsetR.y / height);\n	vec2 offset_g = vec2(offsetG.x / width, offsetG.y / height);\n	vec2 offset_b = vec2(offsetB.x / width, offsetB.y / height);\n	offset_r += vUv;\n	offset_g += vUv;\n	offset_b += vUv;\n	color.r = texture2D(tDiffuse, offset_r).r;\n	color.g = texture2D(tDiffuse, offset_g).g;\n	color.b = texture2D(tDiffuse, offset_b).b;\n	gl_FragColor = color;\n}'
    };

    function RGBshiftPass() {
      var shader;
      shader = RGBshiftPass.shader;
      this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      this.uniforms["offsetR"].value = new THREE.Vector2(0.0, 1.5);
      this.uniforms["offsetG"].value = new THREE.Vector2(0.0, 0.0);
      this.uniforms["offsetB"].value = new THREE.Vector2(0.0, -1.5);
      this.material = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
      this.enabled = true;
      this.renderToScreen = false;
      this.needsSwap = true;
    }

    RGBshiftPass.prototype.render = function(renderer, writeBuffer, readBuffer, delta) {
      this.uniforms["tDiffuse"].texture = readBuffer;
      this.uniforms["width"].value = readBuffer.width * 1.0;
      this.uniforms["height"].value = readBuffer.height * 1.0;
      this.uniforms["time"].value += delta;
      THREE.EffectComposer.quad.material = this.material;
      if (this.renderToScreen) {
        return renderer.render(THREE.EffectComposer.scene, THREE.EffectComposer.camera);
      } else {
        return renderer.render(THREE.EffectComposer.scene, THREE.EffectComposer.camera, writeBuffer, false);
      }
    };

    return RGBshiftPass;

  })();

  this.RGBshiftPass = RGBshiftPass;

}).call(this);
